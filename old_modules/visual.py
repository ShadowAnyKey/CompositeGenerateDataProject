import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from scipy.stats import ttest_rel
import io

st.title('üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –∏ —Ä–µ–∞–ª—å–Ω—ã—Ö —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤')

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
st.header("1. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤")
real_files = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–º–∏ (Excel)", type=['xlsx'], accept_multiple_files=True)
virt_files = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º–∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–º–∏ (Excel)", type=['xlsx'], accept_multiple_files=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
st.header("2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
error_threshold = st.slider("–ü–æ—Ä–æ–≥ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏ (%)", 5, 30, 15, 1)
if error_threshold < 15:
    st.warning("‚ö†Ô∏è –£–º–µ–Ω—å—à–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ –º–æ–∂–µ—Ç —Å–Ω–∏–∑–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π!")

pair_only = st.checkbox('‚úÖ –°—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —Å—Ç—Ä–æ–≥–æ –ø–æ –ø–∞—Ä–∞–º', value=False)

if real_files and virt_files:
    if st.button('‚úÖ –°—Ä–∞–≤–Ω–∏—Ç—å'):
        matched_results = []
        total_virtual, total_real, lost_matches = 0, 0, 0

        for virt_file in virt_files:
            df_virt = pd.read_excel(virt_file, sheet_name='–†–µ–∑—É–ª—å—Ç–∞—Ç—ã', header=0, skiprows=[1]).rename(columns={
                '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–æ–ª–æ–∫–Ω–∞, %':'fiber_percent','E–º–æ–¥, –ì–ø–∞':'E_modulus_GPa','Fmax, –ù':'Fmax_N',
                'sM, –ú–ü–∞':'strength_MPa','dL –ø—Ä–∏ F–º–∞–∫—Å %':'elongation_percent','–†–∞—Å—Ç–≤–æ—Ä –ø–æ–ª–∏–º–µ—Ä–∞,%':'polymer_percent'
            })
            total_virtual += len(df_virt)

            for real_file in real_files:
                df_real = pd.read_excel(real_file, sheet_name='–†–µ–∑—É–ª—å—Ç–∞—Ç—ã', header=0, skiprows=[1]).rename(columns={
                    '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–æ–ª–æ–∫–Ω–∞, %':'fiber_percent','E–º–æ–¥':'E_modulus_GPa','Fmax':'Fmax_N',
                    'sM':'strength_MPa','dL –ø—Ä–∏ F–º–∞–∫—Å':'elongation_percent','–†–∞—Å—Ç–≤–æ—Ä –ø–æ–ª–∏–º–µ—Ä–∞,%':'polymer_percent'
                })
                total_real += len(df_real)

                polymer_values = df_virt['polymer_percent'].dropna().unique()

                for polymer in polymer_values:
                    virt_group = df_virt[df_virt['polymer_percent'] == polymer]
                    real_group = df_real[df_real['polymer_percent'] == polymer]
                    real_copy = real_group.copy()

                    if real_group.empty:
                        lost_matches += len(virt_group)
                        continue

                    for idx, virt_row in virt_group.iterrows():
                        real_copy['diff'] = (
                            np.abs(real_copy['fiber_percent'] - virt_row['fiber_percent']) +
                            (np.abs(real_copy['E_modulus_GPa'] - virt_row['E_modulus_GPa']) / virt_row['E_modulus_GPa']) * 100 +
                            (np.abs(real_copy['Fmax_N'] - virt_row['Fmax_N']) / virt_row['Fmax_N']) * 100 +
                            (np.abs(real_copy['strength_MPa'] - virt_row['strength_MPa']) / virt_row['strength_MPa']) * 100 +
                            (np.abs(real_copy['elongation_percent'] - virt_row['elongation_percent']) / virt_row['elongation_percent']) * 100
                        )

                        suitable_real = real_copy[real_copy['diff'] <= error_threshold]

                        if suitable_real.empty:
                            lost_matches += 1
                        elif pair_only:
                            closest_idx = suitable_real['diff'].idxmin()
                            matched_results.append((virt_row, real_copy.loc[closest_idx]))
                            lost_matches += (len(suitable_real) - 1)
                            real_copy = real_copy.drop(index=closest_idx)
                        else:
                            for _, real_row in suitable_real.iterrows():
                                matched_results.append((virt_row, real_row))

        if matched_results:
            metrics = {'Fmax_N':[],'strength_MPa':[],'elongation_percent':[]}
            match_table = []

            for virt_row, real_row in matched_results:
                match_table.append({
                    'virt_polymer%': virt_row['polymer_percent'],
                    'real_polymer%': real_row['polymer_percent'],
                    'virt_fiber%': virt_row['fiber_percent'],
                    'real_fiber%': real_row['fiber_percent'],
                    'virt_E_modulus': virt_row['E_modulus_GPa'],
                    'real_E_modulus': real_row['E_modulus_GPa'],
                    'diff %': real_row['diff']
                })
                for m in metrics:
                    metrics[m].append((real_row[m], virt_row[m]))

            results = {}
            for m, pairs in metrics.items():
                y_true, y_pred = zip(*pairs)
                results[f'{m}_RMSE'] = np.sqrt(mean_squared_error(y_true, y_pred))
                results[f'{m}_MAE'] = mean_absolute_error(y_true, y_pred)
                results[f'{m}_R2'] = r2_score(y_true, y_pred)

            results_df = pd.DataFrame([results])
            st.subheader("üìå –ò—Ç–æ–≥–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏:")
            st.dataframe(results_df)

            # –û—Ü–µ–Ω–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
            st.subheader("üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö")

            def evaluate_metrics(results):
                conclusions = []
                thresholds = {'excellent': 0.8, 'good': 0.6, 'moderate': 0.4}
                for param in ['Fmax_N_R2', 'strength_MPa_R2', 'elongation_percent_R2']:
                    r2 = results[param]
                    param_name = param.replace("_R2", "")
                    if r2 >= thresholds['excellent']:
                        conclusions.append((param_name, "‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å"))
                    elif r2 >= thresholds['good']:
                        conclusions.append((param_name, "üü° –•–æ—Ä–æ—à–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ"))
                    elif r2 >= thresholds['moderate']:
                        conclusions.append((param_name, "üü† –£–º–µ—Ä–µ–Ω–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞"))
                    else:
                        conclusions.append((param_name, "üî¥ –ù–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å, –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è"))
                return conclusions

            conclusions = evaluate_metrics(results)
            for param, conclusion in conclusions:
                st.write(f"**{param}**: {conclusion}")

            if all("‚úÖ" in c[1] for c in conclusions):
                st.success("üëç –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ—á–Ω—ã–µ –∏ –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
            elif any("üî¥" in c[1] for c in conclusions):
                st.error("‚ö†Ô∏è –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–º–µ—é—Ç –Ω–∏–∑–∫—É—é —Ç–æ—á–Ω–æ—Å—Ç—å, –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç—Å—è –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –¥–æ—Ä–∞–±–æ—Ç–∫–∏.")
            else:
                st.info("üîç –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–º–µ—é—Ç –ø—Ä–∏–µ–º–ª–µ–º—É—é —Ç–æ—á–Ω–æ—Å—Ç—å, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞.")

            st.subheader("üìà –î–∏–∞–≥—Ä–∞–º–º—ã —Ä–∞—Å—Å–µ—è–Ω–∏—è (–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ vs —Ä–µ–∞–ª—å–Ω—ã–µ)")
            for m in metrics:
                plt.figure(figsize=(5,4))
                plt.scatter(*zip(*metrics[m]), alpha=0.7)
                plt.xlabel('–†–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è')
                plt.ylabel('–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è')
                plt.title(f'–î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Å–µ—è–Ω–∏—è: {m}')
                plt.grid(True)
                st.pyplot(plt)

            st.subheader("üì¶ –Ø—â–∏–∫ —Å —É—Å–∞–º–∏ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–µ–π")
            for m in metrics:
                errors = np.array([r-v for r,v in metrics[m]])
                plt.figure(figsize=(4,3))
                sns.boxplot(x=errors)
                plt.title(f'–Ø—â–∏–∫ —Å —É—Å–∞–º–∏ –æ—à–∏–±–æ–∫: {m}')
                plt.xlabel('–û—à–∏–±–∫–∞')
                plt.grid(True)
                st.pyplot(plt)

            st.subheader("üî¨ –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å (–ø–∞—Ä–Ω—ã–π t-—Ç–µ—Å—Ç)")
            for m in metrics:
                t_stat, p_value = ttest_rel(*zip(*metrics[m]))
                signif = "‚úÖ –∑–Ω–∞—á–∏–º–æ" if p_value < 0.05 else "‚ö†Ô∏è –Ω–µ–∑–Ω–∞—á–∏–º–æ"
                st.write(f"**{m}**: t={t_stat:.3f}, p-value={p_value:.3f} ({signif})")

            buffer = io.BytesIO()
            with pd.ExcelWriter(buffer, engine='openpyxl') as writer:
                results_df.to_excel(writer, sheet_name='Metrics', index=False)
                pd.DataFrame(match_table).to_excel(writer, sheet_name='Matched Experiments', index=False)

            st.download_button("üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç Excel", data=buffer, file_name='final_report.xlsx', mime='application/vnd.ms-excel')
        else:
            st.error("üö´ –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Ä–æ–≥ –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ.")